#!/bin/bash
#  SPDX-License-Identifier: GPL-3.0-only
#  Bash script to run a milestone build providing the version number.
#    Copyright (C) 2023  jgabaut
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Will refuse to run as root. We don't need root privileges in here.
amboso_start_time=`date +%s.%N`
if [[ "$EUID" -eq 0 ]] ; then {
  printf "[AMBOSO]    Please don't run me as root.\n"
  exit 3
  echo_timer "$amboso_start_time"  "Root run" "3"
}
fi
# Set recursion env var if not exists
prog_name="$(readlink -f "$0")"
kernel_name="$(uname -s)"
kernel_release="$(uname -r)"
kernel_version="$(uname -v)"
machine_name="$(uname -m)"
os_name="$(uname -o)"
amboso_currvers="1.9.1"
expected_AMBOSO_API_LVL="1.9.1"
amboso_testflag_version="1.9.1"
#Function to try sourcing amboso_fn.sh
source_amboso_api() {
  if [[ $(basename "$(pwd)") == "amboso" ]] ; then {
    amboso_fn_path="$(realpath "$(pwd)")/amboso_fn.sh"
    if [[ -f $amboso_fn_path ]] ; then {
      [[ $verbose_flag -gt 1 ]] && printf "\033[0;35m[PREP]    Running inside amboso dir. Sourcing: \"$amboso_fn_path\".\e[0m\n" >&2
      source "$amboso_fn_path";
      source_res="$?"
      if [[ $source_res -ne 0 ]] ; then {
        printf "\033[1;31m[PREP]    Failed loading amboso_fn.\n\n    Using file: \"$amboso_fn_path\".\e[0m\n" >&2
        exit 3
      }
      fi
    } else {
      printf "\033[1;31m[ERROR]    Couldn't load amboso_fn, check your symlinks.\e[0m\n"
      exit 2
    }
    fi
  } else {
    amboso_fn_path="$(realpath "$(pwd)")/amboso/amboso_fn.sh"
    found_amboso_dir=0
    [[ $verbose_flag -gt 1 ]] && printf "\033[0;33m[PREP]    Assuming we are running in super-repo. Sourcing: \"$amboso_fn_path\".\e[0m\n" >&2
    [[ -d "$(realpath "$(pwd)")"/amboso ]] && found_amboso_dir=1
    [[ $verbose_flag -gt 1 && $found_amboso_dir -gt 0 ]] && printf "\033[0;32m[PREP]    Found amboso dir.\e[0m\n" >&2
    if [[ -f $amboso_fn_path ]] ; then {
      [[ $verbose_flag -gt 1 ]] && printf "\033[0;35m[PREP]    Valid file at: \"$amboso_fn_path\".\e[0m\n" >&2
      source "$amboso_fn_path";
      source_res="$?"
      [[ $source_res -ne 0 ]] && printf "\033[1;31m[PREP]    Failed loading amboso_fn.\n\n    Using file: \"$amboso_fn_path\".\e[0m\n" >&2
    } else {
      [[ $quiet_flag -eq 0 ]] && printf "\033[0;31m[WARN]    \"$amboso_fn_path\" was not a valid file. Not in valid super-repo.\e[0m\n" >&2
      try_default=1
    }
    fi
    if [[ $try_default -eq 1 && -f /usr/local/bin/amboso_fn.sh ]] ; then { #We only enter here if we failed sourcing
      #We need one more error message to show me are missing functions because of an amboso directory with no file.
      if [[ $found_amboso_dir -gt 0 ]] ; then {
        printf "\033[1;31m[WARN]   Deprecated amboso dir (< 1.4.3) found, as it doesn't provide a function api marker.\e[0m\n\n" >&2
        exit 3
      }
      fi
      amboso_fn_path="/usr/local/bin/amboso_fn.sh"
      [[ $quiet_flag -eq 0 ]] && printf "\033[0;35m[WARN]    Fallback to default path for amboso_fn. Sourcing: \"$amboso_fn_path\".\e[0m\n" >&2
      source "$amboso_fn_path";
      source_res="$?"
      if [[ $source_res -ne 0 ]] ; then {
        printf "\033[1;31m[PREP]    Failed loading amboso_fn. Quitting.\n\n    Using file: \"$amboso_fn_path\".\e[0m\n" >&2
        exit 3
      }
      fi
    }
    fi
  }
  fi

  if [[ $source_res -ne 0 ]] ; then {
    printf "\033[1;31m[PANIC]    Failed sourcing amboso_fn. Expected path: \"$amboso_fn_path\".\e[0m\n"
    exit 2
  }
  fi
  [[ $verbose_flag -gt 1 ]] && printf "\033[0;32m[PREP]    Done loading functions.\e[0m\n" >&2
  [[ $verbose_flag -gt 1 ]] && printf "\033[0;37m[PREP]    \"\$AMBOSO_API_LVL\" is: (\033[0;34m $AMBOSO_API_LVL \033[0;37m, expected { \033[1;33m$expected_AMBOSO_API_LVL\033[0;37m } ).\e[0m\n" >&2
  [[ $tell_uname_flag -eq 1 ]] && print_sysinfo
  if [[ $expected_AMBOSO_API_LVL > $AMBOSO_API_LVL ]] ; then {
    printf "\033[1;31m[PANIC]    AMBOSO_API_LVL not supported. Needed { \033[1;35m$expected_AMBOSO_API_LVL\033[1;31m } , { \033[1;33m$AMBOSO_API_LVL\033[1;31m } is too low.\n\n    Maybe check your \"amboso_fn.sh\" file.\n\e[0m\n"
    printf "\033[1;31m[PANIC]    Couldn't load functions. Quitting.\e[0m\n"
    exit 2
  } elif [[ $AMBOSO_API_LVL > $expected_AMBOSO_API_LVL ]] ; then {
    [[ $verbose_flag -gt 0 ]] && printf "\033[0;31m[WARN]    AMBOSO_API_LVL is greater than expected. Needed { \033[1;35m$expected_AMBOSO_API_LVL\033[0;31m } , { \033[1;34m$AMBOSO_API_LVL\033[0;31m } is higher.\e[0m\n" >&2
    [[ $verbose_flag -gt 0 ]] && printf "\n\033[1;31m[WARN]    Continuing run with unexpected AMBOSO_API_LVL: Needed { \033[1;35m$expected_AMBOSO_API_LVL\033[1;31m } , { \033[1;34m$AMBOSO_API_LVL\033[1;31m } is higher.\e[0m\n"
    #exit 2
  } elif [[ $AMBOSO_API_LVL = "$expected_AMBOSO_API_LVL" ]] ; then {
    [[ $verbose_flag -gt 0 ]] && printf "\033[0;32m[PREP]   Running with \"\$AMBOSO_API_LVL\" [ \033[1;35m$AMBOSO_API_LVL\033[0;32m ]; min is { \033[1;36m$expected_AMBOSO_API_LVL\033[0;32m }.\e[0m\n" >&2
  }
  fi
}

is_interactive=0

[[ $# -eq 0 ]] && is_interactive=1

source_amboso_api
amboso_main "$@"
